"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withSearch = exports.useSearch = void 0;

var _merge2 = _interopRequireDefault(require("lodash/merge"));

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _debounce2 = _interopRequireDefault(require("lodash/debounce"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DEBOUNCE_DURATION = 500;
var ACTION_SET_FILTERS = 'SET_FILTERS';
var ACTION_SET_SEARCH = 'SET_SEARCH';
var ACTION_SET_SEARCH_PATTERN = 'SET_SEARCH_PATTERN';
var ACTION_RESET = 'RESET';

var getSearchReducer = function getSearchReducer(_ref) {
  var defaultFilters = _ref.defaultFilters;
  return function (state, action) {
    var type = action.type,
        payload = action.payload;

    switch (type) {
      case ACTION_SET_FILTERS:
        return _objectSpread(_objectSpread({}, state), {}, {
          filters: payload
        });

      case ACTION_SET_SEARCH:
        return _objectSpread(_objectSpread({}, state), {}, {
          search: payload
        });

      case ACTION_SET_SEARCH_PATTERN:
        return _objectSpread(_objectSpread({}, state), {}, {
          searchPattern: payload
        });

      case ACTION_RESET:
        return {
          filters: defaultFilters,
          search: '',
          searchPattern: ''
        };

      default:
        return state;
    }
  };
};

var useSearch = function useSearch(_ref2) {
  var setState = _ref2.setState,
      customSearch = _ref2.search,
      customFilters = _ref2.filters,
      emptyFilters = _ref2.emptyFilters,
      defaultFilters = _ref2.defaultFilters,
      allEntriesFilters = _ref2.allEntriesFilters;
  // When we pass custom filters, set the other flags to false (emptyFilters)
  var initialFilters = customFilters ? (0, _merge2["default"])({}, emptyFilters, customFilters) : defaultFilters;

  var _useReducer = (0, _react.useReducer)(getSearchReducer({
    defaultFilters: defaultFilters
  }), {
    search: customSearch,
    searchPattern: new RegExp(customSearch),
    filters: (0, _merge2["default"])({}, emptyFilters, initialFilters)
  }),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      _useReducer2$ = _useReducer2[0],
      search = _useReducer2$.search,
      searchPattern = _useReducer2$.searchPattern,
      filters = _useReducer2$.filters,
      dispatch = _useReducer2[1];

  var debouncedSearch = (0, _react.useCallback)((0, _debounce2["default"])(function (newValue) {
    var newPattern;

    if (!newValue.trim()) {
      return dispatch({
        type: ACTION_SET_SEARCH_PATTERN,
        payload: ''
      });
    }

    try {
      newPattern = new RegExp(newValue);
    } catch (error) {// skip
    }

    if (setState) {
      setState({
        search: newValue
      });
    }

    return dispatch({
      type: ACTION_SET_SEARCH_PATTERN,
      payload: newPattern
    });
  }, DEBOUNCE_DURATION), []);
  var handleUpdateSearch = (0, _react.useCallback)(function (newValue) {
    dispatch({
      type: ACTION_SET_SEARCH,
      payload: newValue
    });
    debouncedSearch(newValue);
  }, []);
  var handleUpdateFilters = (0, _react.useCallback)(function (newFilters) {
    if (setState) {
      setState({
        filters: newFilters
      });
    }

    dispatch({
      type: ACTION_SET_FILTERS,
      payload: newFilters
    });
  }, []);
  var handleResetFilters = (0, _react.useCallback)(function () {
    if (setState) {
      setState({
        filters: defaultFilters,
        search: ''
      });
    } else {
      dispatch({
        type: ACTION_RESET
      });
    }
  }, [defaultFilters]);
  return {
    search: search,
    updateSearch: handleUpdateSearch,
    searchPattern: searchPattern,
    updateFilters: handleUpdateFilters,
    resetFilters: handleResetFilters,
    filters: filters,
    hasActiveFilters: !(0, _isEqual2["default"])(allEntriesFilters, filters)
  };
};

exports.useSearch = useSearch;

var withSearch = function withSearch() {
  return function (BaseComponent) {
    var WithSearch = function WithSearch(props) {
      var allEntriesFilters = props.allEntriesFilters,
          defaultFilters = props.defaultFilters,
          emptyFilters = props.emptyFilters,
          filters = props.filters,
          search = props.search,
          setState = props.setState;
      var searchProps = useSearch({
        search: search,
        filters: filters,
        setState: setState,
        defaultFilters: defaultFilters,
        emptyFilters: emptyFilters,
        allEntriesFilters: allEntriesFilters
      });
      return /*#__PURE__*/_react["default"].createElement(BaseComponent, _extends({}, props, searchProps));
    };

    WithSearch.defaultProps = {
      filters: null,
      setState: null,
      search: ''
    };
    WithSearch.propTypes = {
      allEntriesFilters: _propTypes["default"].object.isRequired,
      // eslint-disable-line react/forbid-prop-types
      emptyFilters: _propTypes["default"].object.isRequired,
      // eslint-disable-line react/forbid-prop-types
      defaultFilters: _propTypes["default"].object.isRequired,
      // eslint-disable-line react/forbid-prop-types
      filters: _propTypes["default"].object,
      // eslint-disable-line react/forbid-prop-types
      search: _propTypes["default"].string,
      setState: _propTypes["default"].func
    };
    return WithSearch;
  };
};

exports.withSearch = withSearch;