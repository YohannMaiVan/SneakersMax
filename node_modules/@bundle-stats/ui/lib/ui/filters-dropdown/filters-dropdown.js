"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FiltersDropdown = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _dropdown = require("../dropdown");

var _filtersDropdownModule = _interopRequireDefault(require("./filters-dropdown.module.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Checkbox = function Checkbox(_ref) {
  var label = _ref.label,
      name = _ref.name,
      getOnOnlyClick = _ref.getOnOnlyClick,
      inputProps = _objectWithoutProperties(_ref, ["label", "name", "getOnOnlyClick"]);

  var id = "filter-".concat(name);
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: _filtersDropdownModule["default"].filter
  }, /*#__PURE__*/_react["default"].createElement("label", {
    className: _filtersDropdownModule["default"].filterLabel
  }, /*#__PURE__*/_react["default"].createElement("input", _extends({
    className: _filtersDropdownModule["default"].filterInput,
    type: "checkbox",
    id: id,
    name: name
  }, inputProps)), /*#__PURE__*/_react["default"].createElement("span", {
    className: _filtersDropdownModule["default"].filterText
  }, label)), getOnOnlyClick && /*#__PURE__*/_react["default"].createElement("button", {
    className: _filtersDropdownModule["default"].filterOnlyButton,
    type: "button",
    onClick: getOnOnlyClick(name)
  }, "only"));
};

Checkbox.propTypes = {
  name: _propTypes["default"].string.isRequired,
  label: _propTypes["default"].string.isRequired,
  getOnOnlyClick: _propTypes["default"].func
};
Checkbox.defaultProps = {
  getOnOnlyClick: null
};

var renderTree = function renderTree(key, data, values, onCheckboxChange, getOnOnlyClick) {
  if (typeof (data === null || data === void 0 ? void 0 : data.defaultValue) !== 'undefined') {
    return /*#__PURE__*/_react["default"].createElement(Checkbox, {
      key: key,
      name: key,
      label: data.label,
      onChange: onCheckboxChange,
      checked: values[key],
      disabled: data.disabled,
      getOnOnlyClick: getOnOnlyClick
    });
  }

  if (_typeof(data) === 'object') {
    var groupLabel = data.label,
        groupData = _objectWithoutProperties(data, ["label"]);

    var isRootGroup = !key;
    var groupItems = Object.entries(groupData);
    var groupCheckboxes = key && groupItems.filter(function (_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
          itemKey = _ref3[0],
          item = _ref3[1];

      return typeof (item === null || item === void 0 ? void 0 : item.defaultValue) !== 'undefined';
    }) || [];
    var isGroupChecked = groupCheckboxes.map(function (_ref4) {
      var _ref5 = _slicedToArray(_ref4, 1),
          itemKey = _ref5[0];

      return (0, _get2["default"])(values, "".concat(key, ".").concat(itemKey));
    }).reduce(function (agg, val) {
      return agg && val;
    }, true);

    var onGroupClearAll = function onGroupClearAll() {
      groupCheckboxes.forEach(function (_ref6) {
        var _ref7 = _slicedToArray(_ref6, 2),
            itemKey = _ref7[0],
            item = _ref7[1];

        onCheckboxChange({
          target: {
            name: "".concat(key, ".").concat(itemKey),
            checked: false
          }
        });
      });
    };

    var onGroupCheckAll = function onGroupCheckAll() {
      groupCheckboxes.forEach(function (_ref8) {
        var _ref9 = _slicedToArray(_ref8, 2),
            itemKey = _ref9[0],
            item = _ref9[1];

        onCheckboxChange({
          target: {
            name: "".concat(key, ".").concat(itemKey),
            checked: true
          }
        });
      });
    };

    var getOnGroupFilterOnlyClick = !isRootGroup ? function (filterKey) {
      return function () {
        onGroupClearAll();
        onCheckboxChange({
          target: {
            name: filterKey,
            checked: true
          }
        });
      };
    } : null;
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: _filtersDropdownModule["default"].group,
      key: key
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: _filtersDropdownModule["default"].groupHeader
    }, groupLabel && /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("h3", {
      className: _filtersDropdownModule["default"].groupTitle
    }, groupLabel), isGroupChecked ? /*#__PURE__*/_react["default"].createElement("button", {
      className: _filtersDropdownModule["default"].groupHeaderButton,
      type: "button",
      onClick: onGroupClearAll
    }, "clear all") : /*#__PURE__*/_react["default"].createElement("button", {
      className: _filtersDropdownModule["default"].groupHeaderButton,
      type: "button",
      onClick: onGroupCheckAll
    }, "check all"))), groupItems.map(function (_ref10) {
      var _ref11 = _slicedToArray(_ref10, 2),
          itemKey = _ref11[0],
          itemData = _ref11[1];

      return renderTree([].concat(_toConsumableArray(key ? [key] : []), [itemKey]).join('.'), itemData, values, onCheckboxChange, getOnGroupFilterOnlyClick);
    }));
  }

  return null;
};

var FiltersDropdown = function FiltersDropdown(props) {
  var className = props.className,
      label = props.label,
      values = props.values,
      filters = props.filters,
      toggleFilter = props.toggleFilter,
      hasActiveFilters = props.hasActiveFilters;

  var onCheckboxChange = function onCheckboxChange(_ref12) {
    var target = _ref12.target;
    return toggleFilter(target.name, target.checked);
  };

  var rootClassName = (0, _classnames["default"])(_filtersDropdownModule["default"].root, className);
  return /*#__PURE__*/_react["default"].createElement(_dropdown.Dropdown, {
    className: rootClassName,
    label: label,
    glyph: "filter",
    align: "right",
    activeLabel: hasActiveFilters
  }, /*#__PURE__*/_react["default"].createElement("form", {
    className: _filtersDropdownModule["default"].dropdown
  }, renderTree('', filters, values, onCheckboxChange)));
};

exports.FiltersDropdown = FiltersDropdown;
FiltersDropdown.defaultProps = {
  className: '',
  label: 'Filters',
  active: false
};
FiltersDropdown.propTypes = {
  className: _propTypes["default"].string,
  label: _propTypes["default"].string,
  hasActiveFilters: _propTypes["default"].bool,
  values: _propTypes["default"].object.isRequired,
  // eslint-disable-line react/forbid-prop-types
  filters: _propTypes["default"].object.isRequired,
  // eslint-disable-line react/forbid-prop-types
  toggleFilter: _propTypes["default"].func.isRequired
};