"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BundleModules = void 0;

var _map2 = _interopRequireDefault(require("lodash/map"));

var _isEmpty2 = _interopRequireDefault(require("lodash/isEmpty"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _utils = require("@bundle-stats/utils");

var _config = _interopRequireDefault(require("../../config.json"));

var _i18n = _interopRequireDefault(require("../../i18n"));

var _flexStack = require("../../layout/flex-stack");

var _stack = require("../../layout/stack");

var _emptySet = require("../../ui/empty-set");

var _fileName = require("../../ui/file-name");

var _filtersDropdown = require("../../ui/filters-dropdown");

var _popover = require("../../ui/popover");

var _sortDropdown = require("../../ui/sort-dropdown");

var _toolbar = require("../../ui/toolbar");

var _tooltip = require("../../ui/tooltip");

var _metricsTable = require("../metrics-table");

var _metricsTableSearch = require("../metrics-table-search");

var _bundleModulesModule = _interopRequireDefault(require("./bundle-modules.module.css"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var getRenderRowHeader = function getRenderRowHeader(labels) {
  return function (row) {
    return /*#__PURE__*/_react["default"].createElement(_tooltip.Tooltip, {
      title: /*#__PURE__*/_react["default"].createElement("div", {
        className: _bundleModulesModule["default"].nameTooltip
      }, row.runs.map(function (run, index) {
        var key = index;
        return /*#__PURE__*/_react["default"].createElement("div", {
          className: _bundleModulesModule["default"].nameTooltipItem,
          key: key
        }, /*#__PURE__*/_react["default"].createElement("h5", {
          className: _bundleModulesModule["default"].nameTooltipTitle
        }, labels[index]), /*#__PURE__*/_react["default"].createElement(_fileName.FileName, {
          className: _bundleModulesModule["default"].nameTooltipText,
          name: run && run.name ? run.name : '-'
        }));
      }))
    }, /*#__PURE__*/_react["default"].createElement(_fileName.FileName, {
      className: _bundleModulesModule["default"].name,
      name: row.label
    }));
  };
};

var Title = function Title() {
  return /*#__PURE__*/_react["default"].createElement(_flexStack.FlexStack, {
    space: "xxxsmall",
    className: _bundleModulesModule["default"].title
  }, /*#__PURE__*/_react["default"].createElement("span", null, _i18n["default"].MODULES), /*#__PURE__*/_react["default"].createElement(_popover.Popover, {
    icon: "help"
  }, /*#__PURE__*/_react["default"].createElement(_stack.Stack, {
    space: "xxxsmall"
  }, /*#__PURE__*/_react["default"].createElement("p", null, _i18n["default"].MODULES_INFO), /*#__PURE__*/_react["default"].createElement("p", null, /*#__PURE__*/_react["default"].createElement("a", {
    href: _config["default"].documentation.modules,
    target: "_blank",
    rel: "noreferrer"
  }, _i18n["default"].READ_MORE)))));
};

var BundleModules = function BundleModules(_ref) {
  var className = _ref.className,
      jobs = _ref.jobs,
      items = _ref.items,
      chunks = _ref.chunks,
      totalRowCount = _ref.totalRowCount,
      updateFilters = _ref.updateFilters,
      resetFilters = _ref.resetFilters,
      filters = _ref.filters,
      sortItems = _ref.sortItems,
      sort = _ref.sort,
      updateSort = _ref.updateSort,
      search = _ref.search,
      updateSearch = _ref.updateSearch,
      hasActiveFilters = _ref.hasActiveFilters;
  var rootClassName = (0, _classnames["default"])(_bundleModulesModule["default"].root, className);

  var clearSearch = function clearSearch() {
    resetFilters();
    updateSearch('');
  };

  var renderRowHeader = (0, _react.useMemo)(function () {
    return getRenderRowHeader((0, _map2["default"])(jobs, 'label'));
  }, []);
  var emptyMessage = (0, _react.useMemo)(function () {
    return /*#__PURE__*/_react["default"].createElement(_emptySet.EmptySet, {
      resources: "modules",
      filtered: totalRowCount !== 0,
      resetFilters: clearSearch
    });
  }, []);

  var dropdownFilters = _objectSpread(_objectSpread(_defineProperty({}, _utils.MODULE_FILTERS.CHANGED, {
    label: 'Changed',
    defaultValue: filters.changed,
    disabled: jobs.length <= 1
  }), !(0, _isEmpty2["default"])(chunks) && _defineProperty({}, _utils.MODULE_CHUNK, _objectSpread({
    label: 'Chunks'
  }, chunks.reduce(function (chunkFilters, _ref2) {
    var id = _ref2.id,
        name = _ref2.name;
    return _objectSpread(_objectSpread({}, chunkFilters), {}, _defineProperty({}, id, {
      label: name,
      defaultValue: (0, _get2["default"])(filters, "".concat(_utils.MODULE_CHUNK, ".").concat(id), true)
    }));
  }, {})))), {}, _defineProperty({}, _utils.MODULE_FILE_TYPE, _objectSpread({
    label: 'File types'
  }, _utils.MODULE_SOURCE_FILE_TYPES.reduce(function (agg, fileType) {
    return _objectSpread(_objectSpread({}, agg), {}, _defineProperty({}, fileType, {
      label: _utils.FILE_TYPE_LABELS[fileType],
      defaultValue: (0, _get2["default"])(filters, "".concat(_utils.MODULE_FILE_TYPE, ".").concat(fileType), true)
    }));
  }, {}))));

  return /*#__PURE__*/_react["default"].createElement("div", {
    className: rootClassName
  }, /*#__PURE__*/_react["default"].createElement(_toolbar.Toolbar, {
    className: _bundleModulesModule["default"].toolbar,
    renderActions: function renderActions(_ref4) {
      var actionClassName = _ref4.actionClassName;
      return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("div", {
        className: actionClassName
      }, /*#__PURE__*/_react["default"].createElement(_sortDropdown.SortDropdown, _extends({
        className: _bundleModulesModule["default"].tableDropdown,
        items: sortItems,
        onChange: updateSort
      }, sort))), /*#__PURE__*/_react["default"].createElement("div", {
        className: actionClassName
      }, /*#__PURE__*/_react["default"].createElement(_filtersDropdown.FiltersDropdown, {
        className: _bundleModulesModule["default"].tableDropdown,
        filters: dropdownFilters,
        label: "Filters (".concat(items.length, "/").concat(totalRowCount, ")"),
        onChange: updateFilters,
        hasActiveFilters: hasActiveFilters
      })));
    }
  }, /*#__PURE__*/_react["default"].createElement(_metricsTableSearch.MetricsTableSearch, {
    className: _bundleModulesModule["default"].toolbarSearch,
    search: search,
    updateSearch: updateSearch,
    placeholder: "Search by name"
  })), /*#__PURE__*/_react["default"].createElement(_metricsTable.MetricsTable, {
    className: _bundleModulesModule["default"].table,
    items: items,
    runs: jobs,
    renderRowHeader: renderRowHeader.current,
    emptyMessage: emptyMessage,
    showHeaderSum: true,
    title: /*#__PURE__*/_react["default"].createElement(Title, null)
  }));
};

exports.BundleModules = BundleModules;
BundleModules.defaultProps = {
  className: '',
  items: [],
  jobs: [],
  totalRowCount: 0,
  hasActiveFilters: false
};
BundleModules.propTypes = {
  /** Adopted child class name */
  className: _propTypes["default"].string,

  /** Rows data */
  items: _propTypes["default"].array,
  // eslint-disable-line react/forbid-prop-types

  /** Jobs data */
  jobs: _propTypes["default"].array,
  // eslint-disable-line react/forbid-prop-types

  /** Chunks data */
  chunks: _propTypes["default"].arrayOf(_propTypes["default"].shape({
    id: _propTypes["default"].string,
    name: _propTypes["default"].string
  })).isRequired,

  /** total row count */
  totalRowCount: _propTypes["default"].number,

  /** Update filters handler */
  updateFilters: _propTypes["default"].func.isRequired,

  /** Reset filters handler */
  resetFilters: _propTypes["default"].func.isRequired,

  /** Filters data */
  filters: _propTypes["default"].shape({
    changed: _propTypes["default"].bool
  }).isRequired,
  hasActiveFilters: _propTypes["default"].bool,
  sortItems: _propTypes["default"].shape(_defineProperty({}, _propTypes["default"].string, _propTypes["default"].shape({
    label: _propTypes["default"].string,
    defaultDirection: _propTypes["default"].bool
  }))).isRequired,
  sort: _propTypes["default"].shape({
    sortBy: _propTypes["default"].string,
    direction: _propTypes["default"].string
  }).isRequired,
  updateSort: _propTypes["default"].func.isRequired,
  search: _propTypes["default"].string.isRequired,
  updateSearch: _propTypes["default"].func.isRequired
};