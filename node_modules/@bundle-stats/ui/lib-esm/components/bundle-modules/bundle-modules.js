import _map from "lodash/map";
import _isEmpty from "lodash/isEmpty";
import _get from "lodash/get";

var _PropTypes$shape;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { useMemo } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { FILE_TYPE_LABELS, MODULE_SOURCE_FILE_TYPES, MODULE_CHUNK, MODULE_FILTERS, MODULE_FILE_TYPE } from '@bundle-stats/utils';
import config from '../../config.json';
import I18N from '../../i18n';
import { FlexStack } from '../../layout/flex-stack';
import { Stack } from '../../layout/stack';
import { EmptySet } from '../../ui/empty-set';
import { FileName } from '../../ui/file-name';
import { FiltersDropdown } from '../../ui/filters-dropdown';
import { Popover } from '../../ui/popover';
import { SortDropdown } from '../../ui/sort-dropdown';
import { Toolbar } from '../../ui/toolbar';
import { Tooltip } from '../../ui/tooltip';
import { MetricsTable } from '../metrics-table';
import { MetricsTableSearch } from '../metrics-table-search';
import css from './bundle-modules.module.css';

var getRenderRowHeader = function getRenderRowHeader(labels) {
  return function (row) {
    return /*#__PURE__*/React.createElement(Tooltip, {
      title: /*#__PURE__*/React.createElement("div", {
        className: css.nameTooltip
      }, row.runs.map(function (run, index) {
        var key = index;
        return /*#__PURE__*/React.createElement("div", {
          className: css.nameTooltipItem,
          key: key
        }, /*#__PURE__*/React.createElement("h5", {
          className: css.nameTooltipTitle
        }, labels[index]), /*#__PURE__*/React.createElement(FileName, {
          className: css.nameTooltipText,
          name: run && run.name ? run.name : '-'
        }));
      }))
    }, /*#__PURE__*/React.createElement(FileName, {
      className: css.name,
      name: row.label
    }));
  };
};

var Title = function Title() {
  return /*#__PURE__*/React.createElement(FlexStack, {
    space: "xxxsmall",
    className: css.title
  }, /*#__PURE__*/React.createElement("span", null, I18N.MODULES), /*#__PURE__*/React.createElement(Popover, {
    icon: "help"
  }, /*#__PURE__*/React.createElement(Stack, {
    space: "xxxsmall"
  }, /*#__PURE__*/React.createElement("p", null, I18N.MODULES_INFO), /*#__PURE__*/React.createElement("p", null, /*#__PURE__*/React.createElement("a", {
    href: config.documentation.modules,
    target: "_blank",
    rel: "noreferrer"
  }, I18N.READ_MORE)))));
};

export var BundleModules = function BundleModules(_ref) {
  var _objectSpread2, _ref3, _objectSpread5;

  var className = _ref.className,
      jobs = _ref.jobs,
      items = _ref.items,
      chunks = _ref.chunks,
      totalRowCount = _ref.totalRowCount,
      updateFilters = _ref.updateFilters,
      resetFilters = _ref.resetFilters,
      filters = _ref.filters,
      sortItems = _ref.sortItems,
      sort = _ref.sort,
      updateSort = _ref.updateSort,
      search = _ref.search,
      updateSearch = _ref.updateSearch,
      hasActiveFilters = _ref.hasActiveFilters;
  var rootClassName = cx(css.root, className);

  var clearSearch = function clearSearch() {
    resetFilters();
    updateSearch('');
  };

  var renderRowHeader = useMemo(function () {
    return getRenderRowHeader(_map(jobs, 'label'));
  }, []);
  var emptyMessage = useMemo(function () {
    return /*#__PURE__*/React.createElement(EmptySet, {
      resources: "modules",
      filtered: totalRowCount !== 0,
      resetFilters: clearSearch
    });
  }, []);

  var dropdownFilters = _objectSpread(_objectSpread((_objectSpread2 = {}, _objectSpread2[MODULE_FILTERS.CHANGED] = {
    label: 'Changed',
    defaultValue: filters.changed,
    disabled: jobs.length <= 1
  }, _objectSpread2), !_isEmpty(chunks) && (_ref3 = {}, _ref3[MODULE_CHUNK] = _objectSpread({
    label: 'Chunks'
  }, chunks.reduce(function (chunkFilters, _ref2) {
    var _objectSpread3;

    var id = _ref2.id,
        name = _ref2.name;
    return _objectSpread(_objectSpread({}, chunkFilters), {}, (_objectSpread3 = {}, _objectSpread3[id] = {
      label: name,
      defaultValue: _get(filters, MODULE_CHUNK + "." + id, true)
    }, _objectSpread3));
  }, {})), _ref3)), {}, (_objectSpread5 = {}, _objectSpread5[MODULE_FILE_TYPE] = _objectSpread({
    label: 'File types'
  }, MODULE_SOURCE_FILE_TYPES.reduce(function (agg, fileType) {
    var _objectSpread4;

    return _objectSpread(_objectSpread({}, agg), {}, (_objectSpread4 = {}, _objectSpread4[fileType] = {
      label: FILE_TYPE_LABELS[fileType],
      defaultValue: _get(filters, MODULE_FILE_TYPE + "." + fileType, true)
    }, _objectSpread4));
  }, {})), _objectSpread5));

  return /*#__PURE__*/React.createElement("div", {
    className: rootClassName
  }, /*#__PURE__*/React.createElement(Toolbar, {
    className: css.toolbar,
    renderActions: function renderActions(_ref4) {
      var actionClassName = _ref4.actionClassName;
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
        className: actionClassName
      }, /*#__PURE__*/React.createElement(SortDropdown, _extends({
        className: css.tableDropdown,
        items: sortItems,
        onChange: updateSort
      }, sort))), /*#__PURE__*/React.createElement("div", {
        className: actionClassName
      }, /*#__PURE__*/React.createElement(FiltersDropdown, {
        className: css.tableDropdown,
        filters: dropdownFilters,
        label: "Filters (" + items.length + "/" + totalRowCount + ")",
        onChange: updateFilters,
        hasActiveFilters: hasActiveFilters
      })));
    }
  }, /*#__PURE__*/React.createElement(MetricsTableSearch, {
    className: css.toolbarSearch,
    search: search,
    updateSearch: updateSearch,
    placeholder: "Search by name"
  })), /*#__PURE__*/React.createElement(MetricsTable, {
    className: css.table,
    items: items,
    runs: jobs,
    renderRowHeader: renderRowHeader.current,
    emptyMessage: emptyMessage,
    showHeaderSum: true,
    title: /*#__PURE__*/React.createElement(Title, null)
  }));
};
BundleModules.defaultProps = {
  className: '',
  items: [],
  jobs: [],
  totalRowCount: 0,
  hasActiveFilters: false
};
BundleModules.propTypes = {
  /** Adopted child class name */
  className: PropTypes.string,

  /** Rows data */
  items: PropTypes.array,
  // eslint-disable-line react/forbid-prop-types

  /** Jobs data */
  jobs: PropTypes.array,
  // eslint-disable-line react/forbid-prop-types

  /** Chunks data */
  chunks: PropTypes.arrayOf(PropTypes.shape({
    id: PropTypes.string,
    name: PropTypes.string
  })).isRequired,

  /** total row count */
  totalRowCount: PropTypes.number,

  /** Update filters handler */
  updateFilters: PropTypes.func.isRequired,

  /** Reset filters handler */
  resetFilters: PropTypes.func.isRequired,

  /** Filters data */
  filters: PropTypes.shape({
    changed: PropTypes.bool
  }).isRequired,
  hasActiveFilters: PropTypes.bool,
  sortItems: PropTypes.shape((_PropTypes$shape = {}, _PropTypes$shape[PropTypes.string] = PropTypes.shape({
    label: PropTypes.string,
    defaultDirection: PropTypes.bool
  }), _PropTypes$shape)).isRequired,
  sort: PropTypes.shape({
    sortBy: PropTypes.string,
    direction: PropTypes.string
  }).isRequired,
  updateSort: PropTypes.func.isRequired,
  search: PropTypes.string.isRequired,
  updateSearch: PropTypes.func.isRequired
};