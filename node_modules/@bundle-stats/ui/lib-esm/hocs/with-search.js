import _merge from "lodash/merge";
import _isEqual from "lodash/isEqual";
import _debounce from "lodash/debounce";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { useCallback, useReducer } from 'react';
import PropTypes from 'prop-types';
var DEBOUNCE_DURATION = 500;
var ACTION_SET_FILTERS = 'SET_FILTERS';
var ACTION_SET_SEARCH = 'SET_SEARCH';
var ACTION_SET_SEARCH_PATTERN = 'SET_SEARCH_PATTERN';
var ACTION_RESET = 'RESET';

var getSearchReducer = function getSearchReducer(_ref) {
  var defaultFilters = _ref.defaultFilters;
  return function (state, action) {
    var type = action.type,
        payload = action.payload;

    switch (type) {
      case ACTION_SET_FILTERS:
        return _objectSpread(_objectSpread({}, state), {}, {
          filters: payload
        });

      case ACTION_SET_SEARCH:
        return _objectSpread(_objectSpread({}, state), {}, {
          search: payload
        });

      case ACTION_SET_SEARCH_PATTERN:
        return _objectSpread(_objectSpread({}, state), {}, {
          searchPattern: payload
        });

      case ACTION_RESET:
        return {
          filters: defaultFilters,
          search: '',
          searchPattern: ''
        };

      default:
        return state;
    }
  };
};

export var useSearch = function useSearch(_ref2) {
  var setState = _ref2.setState,
      customSearch = _ref2.search,
      customFilters = _ref2.filters,
      emptyFilters = _ref2.emptyFilters,
      defaultFilters = _ref2.defaultFilters,
      allEntriesFilters = _ref2.allEntriesFilters;
  // When we pass custom filters, set the other flags to false (emptyFilters)
  var initialFilters = customFilters ? _merge({}, emptyFilters, customFilters) : defaultFilters;

  var _useReducer = useReducer(getSearchReducer({
    defaultFilters: defaultFilters
  }), {
    search: customSearch,
    searchPattern: new RegExp(customSearch),
    filters: _merge({}, emptyFilters, initialFilters)
  }),
      _useReducer$ = _useReducer[0],
      search = _useReducer$.search,
      searchPattern = _useReducer$.searchPattern,
      filters = _useReducer$.filters,
      dispatch = _useReducer[1];

  var debouncedSearch = useCallback(_debounce(function (newValue) {
    var newPattern;

    if (!newValue.trim()) {
      return dispatch({
        type: ACTION_SET_SEARCH_PATTERN,
        payload: ''
      });
    }

    try {
      newPattern = new RegExp(newValue);
    } catch (error) {// skip
    }

    if (setState) {
      setState({
        search: newValue
      });
    }

    return dispatch({
      type: ACTION_SET_SEARCH_PATTERN,
      payload: newPattern
    });
  }, DEBOUNCE_DURATION), []);
  var handleUpdateSearch = useCallback(function (newValue) {
    dispatch({
      type: ACTION_SET_SEARCH,
      payload: newValue
    });
    debouncedSearch(newValue);
  }, []);
  var handleUpdateFilters = useCallback(function (newFilters) {
    if (setState) {
      setState({
        filters: newFilters
      });
    }

    dispatch({
      type: ACTION_SET_FILTERS,
      payload: newFilters
    });
  }, []);
  var handleResetFilters = useCallback(function () {
    if (setState) {
      setState({
        filters: defaultFilters,
        search: ''
      });
    } else {
      dispatch({
        type: ACTION_RESET
      });
    }
  }, [defaultFilters]);
  return {
    search: search,
    updateSearch: handleUpdateSearch,
    searchPattern: searchPattern,
    updateFilters: handleUpdateFilters,
    resetFilters: handleResetFilters,
    filters: filters,
    hasActiveFilters: !_isEqual(allEntriesFilters, filters)
  };
};
export var withSearch = function withSearch() {
  return function (BaseComponent) {
    var WithSearch = function WithSearch(props) {
      var allEntriesFilters = props.allEntriesFilters,
          defaultFilters = props.defaultFilters,
          emptyFilters = props.emptyFilters,
          filters = props.filters,
          search = props.search,
          setState = props.setState;
      var searchProps = useSearch({
        search: search,
        filters: filters,
        setState: setState,
        defaultFilters: defaultFilters,
        emptyFilters: emptyFilters,
        allEntriesFilters: allEntriesFilters
      });
      return /*#__PURE__*/React.createElement(BaseComponent, _extends({}, props, searchProps));
    };

    WithSearch.defaultProps = {
      filters: null,
      setState: null,
      search: ''
    };
    WithSearch.propTypes = {
      allEntriesFilters: PropTypes.object.isRequired,
      // eslint-disable-line react/forbid-prop-types
      emptyFilters: PropTypes.object.isRequired,
      // eslint-disable-line react/forbid-prop-types
      defaultFilters: PropTypes.object.isRequired,
      // eslint-disable-line react/forbid-prop-types
      filters: PropTypes.object,
      // eslint-disable-line react/forbid-prop-types
      search: PropTypes.string,
      setState: PropTypes.func
    };
    return WithSearch;
  };
};