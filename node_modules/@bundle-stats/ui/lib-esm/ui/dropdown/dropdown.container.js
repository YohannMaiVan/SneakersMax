function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import OutsideClickHandler from 'react-outside-click-handler';
export var dropdownContainer = function dropdownContainer(BaseComponent) {
  var DropdownContainer = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(DropdownContainer, _React$Component);

    function DropdownContainer(props) {
      var _this;

      _this = _React$Component.call(this, props) || this;

      _defineProperty(_assertThisInitialized(_this), "dropdownToggle", function () {
        return _this.setState(function (_ref) {
          var open = _ref.open;
          return {
            open: !open
          };
        });
      });

      _defineProperty(_assertThisInitialized(_this), "dropdownClose", function () {
        return _this.setState({
          open: false
        });
      });

      _this.state = {
        open: false
      };
      return _this;
    }

    var _proto = DropdownContainer.prototype;

    _proto.render = function render() {
      // Disable outsideClickHandler when not running in a browser
      var disableOutsideClickHandler = typeof document === 'undefined';
      return /*#__PURE__*/React.createElement(OutsideClickHandler, {
        onOutsideClick: this.dropdownClose,
        disabled: disableOutsideClickHandler
      }, /*#__PURE__*/React.createElement(BaseComponent, _extends({}, this.props, this.state, {
        dropdownToggle: this.dropdownToggle
      })));
    };

    return DropdownContainer;
  }(React.Component);

  return DropdownContainer;
};