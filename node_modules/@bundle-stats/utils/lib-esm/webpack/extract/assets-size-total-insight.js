"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractAssetsSizeTotalInsight = void 0;

var _template2 = _interopRequireDefault(require("lodash/template"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _insights = require("../../config/insights");

var _metrics = require("../../utils/metrics");

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const INFO_TEMPLATE = (0, _template2.default)('<%= metric %> â€” <%= displayValue %> (<%= displayDeltaPercentage %>).');
const METRIC_NAME = 'totalSizeByTypeALL';

const extractAssetsSizeTotalInsight = (webpackStats, currentExtractedData, baselineBundleStats) => {
  const currentValue = (0, _get2.default)(currentExtractedData, ['metrics', METRIC_NAME, 'value'], 0);
  const baselineValue = (0, _get2.default)(baselineBundleStats, ['metrics', 'webpack', METRIC_NAME, 'value'], 0);
  const metric = (0, _utils.getMetricType)(METRIC_NAME);
  const info = (0, _metrics.getMetricRunInfo)(metric, currentValue, baselineValue);
  const {
    displayDeltaPercentage,
    displayValue
  } = info;
  return {
    insights: {
      assetsSizeTotal: {
        type: _insights.INSIGHT_INFO,
        data: {
          text: INFO_TEMPLATE({
            metric: metric.label,
            displayValue,
            displayDeltaPercentage
          }),
          md: INFO_TEMPLATE({
            metric: `*${metric.label}*`,
            displayValue: `*${displayValue}*`,
            displayDeltaPercentage: `*${displayDeltaPercentage}*`
          }),
          info
        }
      }
    }
  };
};

exports.extractAssetsSizeTotalInsight = extractAssetsSizeTotalInsight;