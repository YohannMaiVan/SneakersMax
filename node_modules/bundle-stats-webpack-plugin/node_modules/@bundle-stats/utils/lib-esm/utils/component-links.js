"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.METRIC_COMPONENT_LINKS = exports.getComponentStateQueryString = exports.getBundlePackagesByNameComponentLink = exports.getBundleAssetsFileTypeComponentLink = exports.BUNDLE_PACKAGES_DUPLICATE = exports.BUNLDE_PACKAGES_COUNT = exports.getBundleModulesByChunk = exports.getBundleModulesBySearch = exports.BUNDLE_MODULES = exports.BUNDLE_ASSETS_CHUNK_COUNT = exports.BUNDLE_ASSETS_COUNT = exports.BUNDLE_ASSETS_CACHE_INVALIDATION = exports.BUNDLE_ASSETS_INITIAL_CSS = exports.BUNDLE_ASSETS_INITIAL_JS = exports.TOTALS = exports.getModuleFileTypeFilters = exports.getModuleChunkFilters = exports.getAssetEntryTypeFilters = exports.getAssetFileTypeFilters = void 0;

require("core-js/modules/es.array.iterator.js");

var _template2 = _interopRequireDefault(require("lodash/template"));

var _queryString = require("query-string");

var _serializeQueryParams = require("serialize-query-params");

var _fileTypes = require("../config/file-types");

var _componentLinks = require("../config/component-links");

var _i18n = _interopRequireDefault(require("../i18n"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const getAssetFileTypeFilters = (value = true) => _fileTypes.FILE_TYPES.reduce((agg, fileTypeFilter) => _objectSpread(_objectSpread({}, agg), {}, {
  [`${_componentLinks.ASSET_FILE_TYPE}.${fileTypeFilter}`]: value
}), {});

exports.getAssetFileTypeFilters = getAssetFileTypeFilters;

const getAssetEntryTypeFilters = (value = true) => [_componentLinks.ASSET_FILTERS.ENTRY, _componentLinks.ASSET_FILTERS.INITIAL, _componentLinks.ASSET_FILTERS.CHUNK, _componentLinks.ASSET_FILTERS.ASSET].reduce((agg, entryTypeFilter) => _objectSpread(_objectSpread({}, agg), {}, {
  [`${_componentLinks.ASSET_ENTRY_TYPE}.${entryTypeFilter}`]: value
}), {});

exports.getAssetEntryTypeFilters = getAssetEntryTypeFilters;

const getModuleChunkFilters = (chunkIds, value) => chunkIds.reduce((agg, chunkId) => _objectSpread(_objectSpread({}, agg), {}, {
  [`${_componentLinks.MODULE_CHUNK}.${chunkId}`]: value
}), {});

exports.getModuleChunkFilters = getModuleChunkFilters;

const getModuleFileTypeFilters = (value = true) => _fileTypes.MODULE_SOURCE_FILE_TYPES.reduce((agg, fileType) => _objectSpread(_objectSpread({}, agg), {}, {
  [`${_componentLinks.MODULE_FILE_TYPE}.${fileType}`]: value
}), {});
/** @type {} */


exports.getModuleFileTypeFilters = getModuleFileTypeFilters;
const TOTALS = {
  section: _componentLinks.SECTIONS.TOTALS,
  title: _i18n.default.COMPONENT_LINK_TOTALS
};
exports.TOTALS = TOTALS;
const BUNDLE_ASSETS_INITIAL_JS = {
  section: _componentLinks.SECTIONS.ASSETS,
  title: _i18n.default.COMPONENT_LINK_BUNDLE_ASSETS_INITIAL_JS,
  params: {
    [_componentLinks.COMPONENT.BUNDLE_ASSETS]: {
      filters: {
        [_componentLinks.ASSET_FILTERS.CHANGED]: false,
        [`${_componentLinks.ASSET_ENTRY_TYPE}.${_componentLinks.ASSET_FILTERS.INITIAL}`]: true,
        [`${_componentLinks.ASSET_FILE_TYPE}.${_fileTypes.FILE_TYPE_JS}`]: true
      }
    }
  }
};
exports.BUNDLE_ASSETS_INITIAL_JS = BUNDLE_ASSETS_INITIAL_JS;
const BUNDLE_ASSETS_INITIAL_CSS = {
  section: _componentLinks.SECTIONS.ASSETS,
  title: _i18n.default.COMPONENT_LINK_BUNDLE_ASSETS_INITIAL_CSS,
  params: {
    [_componentLinks.COMPONENT.BUNDLE_ASSETS]: {
      filters: {
        [_componentLinks.ASSET_FILTERS.CHANGED]: false,
        [`${_componentLinks.ASSET_ENTRY_TYPE}.${_componentLinks.ASSET_FILTERS.INITIAL}`]: true,
        [`${_componentLinks.ASSET_FILE_TYPE}.${_fileTypes.FILE_TYPE_CSS}`]: true
      }
    }
  }
};
exports.BUNDLE_ASSETS_INITIAL_CSS = BUNDLE_ASSETS_INITIAL_CSS;
const BUNDLE_ASSETS_CACHE_INVALIDATION = {
  section: _componentLinks.SECTIONS.ASSETS,
  title: _i18n.default.COMPONENT_LINK_BUNDLE_ASSETS_CACHE_INVALIDATION,
  params: {
    [_componentLinks.COMPONENT.BUNDLE_ASSETS]: {
      filters: _objectSpread(_objectSpread({
        [_componentLinks.ASSET_FILTERS.CHANGED]: true
      }, getAssetEntryTypeFilters(true)), getAssetFileTypeFilters(true))
    }
  }
};
exports.BUNDLE_ASSETS_CACHE_INVALIDATION = BUNDLE_ASSETS_CACHE_INVALIDATION;
const BUNDLE_ASSETS_COUNT = {
  section: _componentLinks.SECTIONS.ASSETS,
  title: _i18n.default.COMPONENT_LINK_BUNDLE_ASSETS_COUNT,
  params: {
    [_componentLinks.COMPONENT.BUNDLE_ASSETS]: {
      filters: _objectSpread(_objectSpread({
        [_componentLinks.ASSET_FILTERS.CHANGED]: false
      }, getAssetEntryTypeFilters(true)), getAssetFileTypeFilters(true))
    }
  }
};
exports.BUNDLE_ASSETS_COUNT = BUNDLE_ASSETS_COUNT;
const BUNDLE_ASSETS_CHUNK_COUNT = {
  section: _componentLinks.SECTIONS.ASSETS,
  title: _i18n.default.COMPONENT_LINK_BUNDLE_ASSETS_CHUNK_COUNT,
  params: {
    [_componentLinks.COMPONENT.BUNDLE_ASSETS]: {
      filters: _objectSpread({
        [_componentLinks.ASSET_FILTERS.CHANGED]: false,
        [`${_componentLinks.ASSET_ENTRY_TYPE}.${_componentLinks.ASSET_FILTERS.CHUNK}`]: true
      }, getAssetFileTypeFilters(true))
    }
  }
};
exports.BUNDLE_ASSETS_CHUNK_COUNT = BUNDLE_ASSETS_CHUNK_COUNT;
const BUNDLE_MODULES = {
  section: _componentLinks.SECTIONS.MODULES,
  title: _i18n.default.COMPONENT_LINK_MODULES,
  params: {
    [_componentLinks.COMPONENT.BUNDLE_MODULES]: {
      filters: {
        [_componentLinks.MODULE_FILTERS.CHANGED]: false
      }
    }
  }
};
exports.BUNDLE_MODULES = BUNDLE_MODULES;

const getBundleModulesBySearch = search => ({
  section: _componentLinks.SECTIONS.MODULES,
  title: _i18n.default.COMPONENT_LINK_MODULES,
  params: {
    [_componentLinks.COMPONENT.BUNDLE_MODULES]: {
      search,
      filters: {
        [_componentLinks.MODULE_FILTERS.CHANGED]: false
      }
    }
  }
});

exports.getBundleModulesBySearch = getBundleModulesBySearch;

const getBundleModulesByChunk = (chunkIds, chunkId, fileType = '') => ({
  section: _componentLinks.SECTIONS.MODULES,
  title: _i18n.default.COMPONENT_LINK_MODULES,
  params: {
    [_componentLinks.COMPONENT.BUNDLE_MODULES]: {
      filters: _objectSpread(_objectSpread({
        [_componentLinks.MODULE_FILTERS.CHANGED]: false
      }, getModuleChunkFilters(chunkIds, false)), {}, {
        [`${_componentLinks.MODULE_CHUNK}.${chunkId}`]: true
      }, fileType && _objectSpread(_objectSpread({}, getModuleFileTypeFilters(false)), {}, {
        [`${_componentLinks.MODULE_FILE_TYPE}.${fileType}`]: true
      }))
    }
  }
});

exports.getBundleModulesByChunk = getBundleModulesByChunk;
const BUNLDE_PACKAGES_COUNT = {
  section: _componentLinks.SECTIONS.PACKAGES,
  title: _i18n.default.COMPONENT_LINK_PACKAGES_COUNT,
  params: {
    [_componentLinks.COMPONENT.BUNDLE_PACKAGES]: {
      filters: {
        [_componentLinks.PACKAGE_FILTERS.CHANGED]: false
      }
    }
  }
};
exports.BUNLDE_PACKAGES_COUNT = BUNLDE_PACKAGES_COUNT;
const BUNDLE_PACKAGES_DUPLICATE = {
  section: _componentLinks.SECTIONS.PACKAGES,
  title: _i18n.default.COMPONENT_LINK_PACKAGES_DUPLICATE,
  params: {
    [_componentLinks.COMPONENT.BUNDLE_PACKAGES]: {
      filters: {
        [_componentLinks.PACKAGE_FILTERS.CHANGED]: false,
        [_componentLinks.PACKAGE_FILTERS.DUPLICATE]: true
      }
    }
  }
};
exports.BUNDLE_PACKAGES_DUPLICATE = BUNDLE_PACKAGES_DUPLICATE;

const getBundleAssetsFileTypeComponentLink = (fileType, label) => ({
  section: _componentLinks.SECTIONS.ASSETS,
  title: (0, _template2.default)(_i18n.default.COMPONENT_LINK_BUNDLE_ASSETS_BY_FILE_TYPE)({
    label
  }),
  params: {
    [_componentLinks.COMPONENT.BUNDLE_ASSETS]: {
      filters: _objectSpread(_objectSpread(_objectSpread({
        [_componentLinks.ASSET_FILTERS.CHANGED]: false
      }, getAssetEntryTypeFilters(true)), getAssetFileTypeFilters(false)), {}, {
        [`${_componentLinks.ASSET_FILE_TYPE}.${fileType}`]: true
      })
    }
  }
});

exports.getBundleAssetsFileTypeComponentLink = getBundleAssetsFileTypeComponentLink;

const getBundlePackagesByNameComponentLink = search => ({
  section: _componentLinks.SECTIONS.PACKAGES,
  title: _i18n.default.COMPONENT_LINK_VIEW_PACKAGE,
  params: {
    [_componentLinks.COMPONENT.BUNDLE_PACKAGES]: {
      search,
      filters: {
        [_componentLinks.PACKAGE_FILTERS.CHANGED]: false,
        [_componentLinks.PACKAGE_FILTERS.DUPLICATE]: true
      }
    }
  }
});

exports.getBundlePackagesByNameComponentLink = getBundlePackagesByNameComponentLink;

const getComponentStateQueryString = (params = {}) => {
  const meta = Object.keys(params).reduce((agg, componentName) => _objectSpread(_objectSpread({}, agg), {}, {
    [componentName]: _serializeQueryParams.JsonParam
  }), {});
  return (0, _queryString.stringify)((0, _serializeQueryParams.encodeQueryParams)(meta, params));
};

exports.getComponentStateQueryString = getComponentStateQueryString;
const METRIC_COMPONENT_LINKS = new Map([['webpack.totalSizeByTypeALL', {
  link: TOTALS
}], ['webpack.totalInitialSizeJS', {
  link: BUNDLE_ASSETS_INITIAL_JS
}], ['webpack.totalInitialSizeCSS', {
  link: BUNDLE_ASSETS_INITIAL_CSS
}], ['webpack.cacheInvalidation', {
  link: BUNDLE_ASSETS_CACHE_INVALIDATION,
  showDelta: false
}], ['webpack.assetCount', {
  link: BUNDLE_ASSETS_COUNT
}], ['webpack.chunkCount', {
  link: BUNDLE_ASSETS_CHUNK_COUNT
}], ['webpack.moduleCount', {
  link: BUNDLE_MODULES
}], ['webpack.packageCount', {
  link: BUNLDE_PACKAGES_COUNT
}], ['webpack.duplicatePackagesCount', {
  link: BUNDLE_PACKAGES_DUPLICATE
}]]);
exports.METRIC_COMPONENT_LINKS = METRIC_COMPONENT_LINKS;