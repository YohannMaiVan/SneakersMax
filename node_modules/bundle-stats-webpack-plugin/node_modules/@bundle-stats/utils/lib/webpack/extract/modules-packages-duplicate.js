"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractModulesPackagesDuplicate = void 0;

require("core-js/modules/es.array.iterator.js");

var _sum2 = _interopRequireDefault(require("lodash/sum"));

var _orderBy2 = _interopRequireDefault(require("lodash/orderBy"));

var _map2 = _interopRequireDefault(require("lodash/map"));

var _last2 = _interopRequireDefault(require("lodash/last"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _config = require("../../config");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const extractModulesPackagesDuplicate = (webpackStats, currentExtractedData) => {
  const source = (0, _get2.default)(currentExtractedData, 'metrics.packages', {});
  const packagesByName = Object.entries(source).reduce((agg, [packagePath, packageData]) => {
    // Extract package name from path
    const name = (0, _last2.default)(packagePath.split(_config.PACKAGES_SEPARATOR));
    const existingPackageData = agg[name];
    return _objectSpread(_objectSpread({}, agg), {}, {
      [name]: _objectSpread(_objectSpread({}, existingPackageData), {}, {
        children: [...((existingPackageData === null || existingPackageData === void 0 ? void 0 : existingPackageData.children) || []), {
          name: packagePath,
          value: packageData.value
        }]
      })
    });
  }, {}); // Filter, sum and count duplicate packages

  const {
    count,
    duplicatePackages
  } = Object.entries(packagesByName).reduce((agg, [name, data]) => {
    if (data.children.length === 1) {
      return agg;
    }

    return {
      count: agg.count + 1,
      duplicatePackages: [...(agg.duplicatePackages || []), _objectSpread({
        name,
        value: (0, _sum2.default)((0, _map2.default)(data.children, 'value'))
      }, data)]
    };
  }, {
    count: 0,
    duplicatePackages: []
  });

  if (!count) {
    return {
      metrics: {
        duplicatePackagesCount: {
          value: count
        }
      }
    };
  }

  const duplicatePackagesByName = (0, _orderBy2.default)(duplicatePackages, 'value', 'desc').reduce((agg, _ref) => {
    let {
      name
    } = _ref,
        duplicatePackageData = _objectWithoutProperties(_ref, ["name"]);

    return _objectSpread(_objectSpread({}, agg), {}, {
      [name]: _objectSpread(_objectSpread({}, duplicatePackageData), {}, {
        children: (0, _orderBy2.default)(duplicatePackageData.children, 'value', 'desc')
      })
    });
  }, {}); // Generate v2 data structure
  // @TODO remove in v3.0

  const data = Object.entries(duplicatePackagesByName).reduce((agg, [packageName, duplicatePackageData]) => _objectSpread(_objectSpread({}, agg), {}, {
    [packageName]: duplicatePackageData.children.map(({
      name
    }) => name)
  }), {});
  return {
    insights: {
      duplicatePackages: {
        type: _config.INSIGHT_WARNING,
        data
      }
    },
    metrics: {
      duplicatePackagesCount: {
        value: count
      }
    }
  };
};

exports.extractModulesPackagesDuplicate = extractModulesPackagesDuplicate;